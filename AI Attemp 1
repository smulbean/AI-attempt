import tensorflow as tf
print("TensorFlow version:", tf.__version__)

mnist = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.

 #stack a layer with one input tensor and one output tensor
#layers are functions with a known math structure that can be reused and have trainable variables

model = tf.keras.models.Sequential([ 
  tf.keras.layers.Flatten(input_shape=(28, 28)),  #three layers, flatten dense and dropout
  tf.keras.layers.Dense(128, activation='relu'), 
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])
# for each examples, returns vector of logits or log-odds, one for each class
predictions = model(x_train[:1]).numpy() 


#the function converst logits to probability
tf.nn.softmax(predictions).numpy()

# define a loss function for trainning, a loss function is the difference from produced vs actual value
loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

#takes a vector of ground truth and a vector of logits and returns a scalar loss
loss_fn(y_train[:1], predictions).numpy()

#
model.compile(optimizer='adam',
              loss=loss_fn,
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

model.evaluate(x_test,  y_test, verbose=2)

#wrap the entire model and attach softmax
probability_model = tf.keras.Sequential([
  model,
  tf.keras.layers.Softmax()
])

probability_model(x_test[:5])

